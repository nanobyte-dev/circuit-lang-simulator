//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CircuitLang.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class CircuitLangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, MODULE=17, 
		MAIN=18, TRUTH_TABLE=19, IDENTIFIER=20, WS=21, LINE_COMMENT=22, NEWLINE=23, 
		DEC_NUMBER=24, BIN_NUMBER=25, OCT_NUMBER=26, HEX_NUMBER=27;
	public const int
		RULE_program = 0, RULE_module = 1, RULE_module_argument_list = 2, RULE_module_output_list = 3, 
		RULE_identifier_with_array = 4, RULE_statement = 5, RULE_assignment = 6, 
		RULE_expression = 7, RULE_unary_operation = 8, RULE_binary_operator = 9, 
		RULE_unary_operator = 10, RULE_module_call = 11, RULE_variable_declaration = 12, 
		RULE_truth_table = 13, RULE_truth_table_entry = 14, RULE_literal_or_wild = 15, 
		RULE_literal = 16;
	public static readonly string[] ruleNames = {
		"program", "module", "module_argument_list", "module_output_list", "identifier_with_array", 
		"statement", "assignment", "expression", "unary_operation", "binary_operator", 
		"unary_operator", "module_call", "variable_declaration", "truth_table", 
		"truth_table_entry", "literal_or_wild", "literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'->'", "':'", "','", "'['", "']'", "'='", "'&'", 
		"'|'", "'^'", "'~'", "'var'", "'{'", "'}'", "'?'", "'module'", "'main'", 
		"'truth_table'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "MODULE", "MAIN", "TRUTH_TABLE", "IDENTIFIER", 
		"WS", "LINE_COMMENT", "NEWLINE", "DEC_NUMBER", "BIN_NUMBER", "OCT_NUMBER", 
		"HEX_NUMBER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CircuitLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CircuitLangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CircuitLangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CircuitLangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleContext[] module() {
			return GetRuleContexts<ModuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleContext module(int i) {
			return GetRuleContext<ModuleContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICircuitLangListener typedListener = listener as ICircuitLangListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICircuitLangListener typedListener = listener as ICircuitLangListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICircuitLangVisitor<TResult> typedVisitor = visitor as ICircuitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MODULE || _la==MAIN) {
				{
				{
				State = 34;
				module();
				}
				}
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(CircuitLangParser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CircuitLangParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Module_argument_listContext module_argument_list() {
			return GetRuleContext<Module_argument_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Module_output_listContext module_output_list() {
			return GetRuleContext<Module_output_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAIN() { return GetToken(CircuitLangParser.MAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICircuitLangListener typedListener = listener as ICircuitLangListener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICircuitLangListener typedListener = listener as ICircuitLangListener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICircuitLangVisitor<TResult> typedVisitor = visitor as ICircuitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(Context, State);
		EnterRule(_localctx, 2, RULE_module);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MAIN) {
				{
				State = 40;
				Match(MAIN);
				}
			}

			State = 43;
			Match(MODULE);
			State = 44;
			Match(IDENTIFIER);
			State = 45;
			Match(T__0);
			State = 46;
			module_argument_list();
			State = 47;
			Match(T__1);
			State = 48;
			Match(T__2);
			State = 49;
			module_output_list();
			State = 50;
			Match(T__3);
			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__12 || _la==IDENTIFIER) {
				{
				{
				State = 51;
				statement();
				}
				}
				State = 56;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_argument_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_with_arrayContext[] identifier_with_array() {
			return GetRuleContexts<Identifier_with_arrayContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_with_arrayContext identifier_with_array(int i) {
			return GetRuleContext<Identifier_with_arrayContext>(i);
		}
		public Module_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_argument_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICircuitLangListener typedListener = listener as ICircuitLangListener;
			if (typedListener != null) typedListener.EnterModule_argument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICircuitLangListener typedListener = listener as ICircuitLangListener;
			if (typedListener != null) typedListener.ExitModule_argument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICircuitLangVisitor<TResult> typedVisitor = visitor as ICircuitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_argument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_argument_listContext module_argument_list() {
		Module_argument_listContext _localctx = new Module_argument_listContext(Context, State);
		EnterRule(_localctx, 4, RULE_module_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 57;
				identifier_with_array();
				State = 62;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 58;
					Match(T__4);
					State = 59;
					identifier_with_array();
					}
					}
					State = 64;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_output_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_with_arrayContext[] identifier_with_array() {
			return GetRuleContexts<Identifier_with_arrayContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_with_arrayContext identifier_with_array(int i) {
			return GetRuleContext<Identifier_with_arrayContext>(i);
		}
		public Module_output_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_output_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICircuitLangListener typedListener = listener as ICircuitLangListener;
			if (typedListener != null) typedListener.EnterModule_output_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICircuitLangListener typedListener = listener as ICircuitLangListener;
			if (typedListener != null) typedListener.ExitModule_output_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICircuitLangVisitor<TResult> typedVisitor = visitor as ICircuitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_output_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_output_listContext module_output_list() {
		Module_output_listContext _localctx = new Module_output_listContext(Context, State);
		EnterRule(_localctx, 6, RULE_module_output_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			identifier_with_array();
			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 68;
				Match(T__4);
				State = 69;
				identifier_with_array();
				}
				}
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifier_with_arrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CircuitLangParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC_NUMBER() { return GetToken(CircuitLangParser.DEC_NUMBER, 0); }
		public Identifier_with_arrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_with_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICircuitLangListener typedListener = listener as ICircuitLangListener;
			if (typedListener != null) typedListener.EnterIdentifier_with_array(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICircuitLangListener typedListener = listener as ICircuitLangListener;
			if (typedListener != null) typedListener.ExitIdentifier_with_array(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICircuitLangVisitor<TResult> typedVisitor = visitor as ICircuitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier_with_array(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_with_arrayContext identifier_with_array() {
		Identifier_with_arrayContext _localctx = new Identifier_with_arrayContext(Context, State);
		EnterRule(_localctx, 8, RULE_identifier_with_array);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			Match(IDENTIFIER);
			State = 79;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 76;
				Match(T__5);
				State = 77;
				Match(DEC_NUMBER);
				State = 78;
				Match(T__6);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICircuitLangListener typedListener = listener as ICircuitLangListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICircuitLangListener typedListener = listener as ICircuitLangListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICircuitLangVisitor<TResult> typedVisitor = visitor as ICircuitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_statement);
		try {
			State = 83;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 81;
				assignment();
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 2);
				{
				State = 82;
				variable_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_with_arrayContext[] identifier_with_array() {
			return GetRuleContexts<Identifier_with_arrayContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_with_arrayContext identifier_with_array(int i) {
			return GetRuleContext<Identifier_with_arrayContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICircuitLangListener typedListener = listener as ICircuitLangListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICircuitLangListener typedListener = listener as ICircuitLangListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICircuitLangVisitor<TResult> typedVisitor = visitor as ICircuitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 12, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			identifier_with_array();
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 86;
				Match(T__4);
				State = 87;
				identifier_with_array();
				}
				}
				State = 92;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 93;
			Match(T__7);
			State = 94;
			expression(0);
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 95;
				Match(T__4);
				State = 96;
				expression(0);
				}
				}
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_with_arrayContext identifier_with_array() {
			return GetRuleContext<Identifier_with_arrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_operationContext unary_operation() {
			return GetRuleContext<Unary_operationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Module_callContext module_call() {
			return GetRuleContext<Module_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Truth_tableContext truth_table() {
			return GetRuleContext<Truth_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Binary_operatorContext binary_operator() {
			return GetRuleContext<Binary_operatorContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICircuitLangListener typedListener = listener as ICircuitLangListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICircuitLangListener typedListener = listener as ICircuitLangListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICircuitLangVisitor<TResult> typedVisitor = visitor as ICircuitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 103;
				identifier_with_array();
				}
				break;
			case 2:
				{
				State = 104;
				literal();
				}
				break;
			case 3:
				{
				State = 105;
				Match(T__0);
				State = 106;
				expression(0);
				State = 107;
				Match(T__1);
				}
				break;
			case 4:
				{
				State = 109;
				unary_operation();
				}
				break;
			case 5:
				{
				State = 110;
				module_call();
				}
				break;
			case 6:
				{
				State = 111;
				truth_table();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 120;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 114;
					if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
					State = 115;
					binary_operator();
					State = 116;
					expression(5);
					}
					} 
				}
				State = 122;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Unary_operationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_operatorContext unary_operator() {
			return GetRuleContext<Unary_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Unary_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICircuitLangListener typedListener = listener as ICircuitLangListener;
			if (typedListener != null) typedListener.EnterUnary_operation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICircuitLangListener typedListener = listener as ICircuitLangListener;
			if (typedListener != null) typedListener.ExitUnary_operation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICircuitLangVisitor<TResult> typedVisitor = visitor as ICircuitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_operation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operationContext unary_operation() {
		Unary_operationContext _localctx = new Unary_operationContext(Context, State);
		EnterRule(_localctx, 16, RULE_unary_operation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			unary_operator();
			State = 124;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_operatorContext : ParserRuleContext {
		public Binary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICircuitLangListener typedListener = listener as ICircuitLangListener;
			if (typedListener != null) typedListener.EnterBinary_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICircuitLangListener typedListener = listener as ICircuitLangListener;
			if (typedListener != null) typedListener.ExitBinary_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICircuitLangVisitor<TResult> typedVisitor = visitor as ICircuitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Binary_operatorContext binary_operator() {
		Binary_operatorContext _localctx = new Binary_operatorContext(Context, State);
		EnterRule(_localctx, 18, RULE_binary_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 3584L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operatorContext : ParserRuleContext {
		public Unary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICircuitLangListener typedListener = listener as ICircuitLangListener;
			if (typedListener != null) typedListener.EnterUnary_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICircuitLangListener typedListener = listener as ICircuitLangListener;
			if (typedListener != null) typedListener.ExitUnary_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICircuitLangVisitor<TResult> typedVisitor = visitor as ICircuitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operatorContext unary_operator() {
		Unary_operatorContext _localctx = new Unary_operatorContext(Context, State);
		EnterRule(_localctx, 20, RULE_unary_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CircuitLangParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Module_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICircuitLangListener typedListener = listener as ICircuitLangListener;
			if (typedListener != null) typedListener.EnterModule_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICircuitLangListener typedListener = listener as ICircuitLangListener;
			if (typedListener != null) typedListener.ExitModule_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICircuitLangVisitor<TResult> typedVisitor = visitor as ICircuitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_callContext module_call() {
		Module_callContext _localctx = new Module_callContext(Context, State);
		EnterRule(_localctx, 22, RULE_module_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			Match(IDENTIFIER);
			State = 131;
			Match(T__0);
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 253235202L) != 0) {
				{
				State = 132;
				expression(0);
				State = 137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 133;
					Match(T__4);
					State = 134;
					expression(0);
					}
					}
					State = 139;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 142;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_with_arrayContext identifier_with_array() {
			return GetRuleContext<Identifier_with_arrayContext>(0);
		}
		public Variable_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICircuitLangListener typedListener = listener as ICircuitLangListener;
			if (typedListener != null) typedListener.EnterVariable_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICircuitLangListener typedListener = listener as ICircuitLangListener;
			if (typedListener != null) typedListener.ExitVariable_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICircuitLangVisitor<TResult> typedVisitor = visitor as ICircuitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declarationContext variable_declaration() {
		Variable_declarationContext _localctx = new Variable_declarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_variable_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			Match(T__12);
			State = 145;
			identifier_with_array();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Truth_tableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUTH_TABLE() { return GetToken(CircuitLangParser.TRUTH_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Truth_table_entryContext[] truth_table_entry() {
			return GetRuleContexts<Truth_table_entryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Truth_table_entryContext truth_table_entry(int i) {
			return GetRuleContext<Truth_table_entryContext>(i);
		}
		public Truth_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_truth_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICircuitLangListener typedListener = listener as ICircuitLangListener;
			if (typedListener != null) typedListener.EnterTruth_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICircuitLangListener typedListener = listener as ICircuitLangListener;
			if (typedListener != null) typedListener.ExitTruth_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICircuitLangVisitor<TResult> typedVisitor = visitor as ICircuitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTruth_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Truth_tableContext truth_table() {
		Truth_tableContext _localctx = new Truth_tableContext(Context, State);
		EnterRule(_localctx, 26, RULE_truth_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			Match(TRUTH_TABLE);
			State = 148;
			Match(T__0);
			State = 149;
			expression(0);
			State = 154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 150;
				Match(T__4);
				State = 151;
				expression(0);
				}
				}
				State = 156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 157;
			Match(T__1);
			State = 158;
			Match(T__13);
			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 251658240L) != 0) {
				{
				{
				State = 159;
				truth_table_entry();
				}
				}
				State = 164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 165;
			Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Truth_table_entryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Literal_or_wildContext[] literal_or_wild() {
			return GetRuleContexts<Literal_or_wildContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Literal_or_wildContext literal_or_wild(int i) {
			return GetRuleContext<Literal_or_wildContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(CircuitLangParser.NEWLINE, 0); }
		public Truth_table_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_truth_table_entry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICircuitLangListener typedListener = listener as ICircuitLangListener;
			if (typedListener != null) typedListener.EnterTruth_table_entry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICircuitLangListener typedListener = listener as ICircuitLangListener;
			if (typedListener != null) typedListener.ExitTruth_table_entry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICircuitLangVisitor<TResult> typedVisitor = visitor as ICircuitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTruth_table_entry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Truth_table_entryContext truth_table_entry() {
		Truth_table_entryContext _localctx = new Truth_table_entryContext(Context, State);
		EnterRule(_localctx, 28, RULE_truth_table_entry);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			literal();
			State = 172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 168;
				Match(T__4);
				State = 169;
				literal();
				}
				}
				State = 174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 175;
			Match(T__3);
			State = 176;
			literal_or_wild();
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 177;
				Match(T__4);
				State = 178;
				literal_or_wild();
				}
				}
				State = 183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 184;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_or_wildContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public Literal_or_wildContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_or_wild; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICircuitLangListener typedListener = listener as ICircuitLangListener;
			if (typedListener != null) typedListener.EnterLiteral_or_wild(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICircuitLangListener typedListener = listener as ICircuitLangListener;
			if (typedListener != null) typedListener.ExitLiteral_or_wild(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICircuitLangVisitor<TResult> typedVisitor = visitor as ICircuitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral_or_wild(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Literal_or_wildContext literal_or_wild() {
		Literal_or_wildContext _localctx = new Literal_or_wildContext(Context, State);
		EnterRule(_localctx, 30, RULE_literal_or_wild);
		try {
			State = 188;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEC_NUMBER:
			case BIN_NUMBER:
			case OCT_NUMBER:
			case HEX_NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 186;
				literal();
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 2);
				{
				State = 187;
				Match(T__15);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC_NUMBER() { return GetToken(CircuitLangParser.DEC_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN_NUMBER() { return GetToken(CircuitLangParser.BIN_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCT_NUMBER() { return GetToken(CircuitLangParser.OCT_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_NUMBER() { return GetToken(CircuitLangParser.HEX_NUMBER, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICircuitLangListener typedListener = listener as ICircuitLangListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICircuitLangListener typedListener = listener as ICircuitLangListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICircuitLangVisitor<TResult> typedVisitor = visitor as ICircuitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 32, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 251658240L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 7: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,27,193,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,1,0,5,0,36,8,0,10,0,12,0,39,9,0,1,1,3,1,42,8,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,53,8,1,10,1,12,1,56,9,1,1,2,1,2,1,
		2,5,2,61,8,2,10,2,12,2,64,9,2,3,2,66,8,2,1,3,1,3,1,3,5,3,71,8,3,10,3,12,
		3,74,9,3,1,4,1,4,1,4,1,4,3,4,80,8,4,1,5,1,5,3,5,84,8,5,1,6,1,6,1,6,5,6,
		89,8,6,10,6,12,6,92,9,6,1,6,1,6,1,6,1,6,5,6,98,8,6,10,6,12,6,101,9,6,1,
		7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,113,8,7,1,7,1,7,1,7,1,7,5,7,
		119,8,7,10,7,12,7,122,9,7,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,
		1,11,1,11,5,11,136,8,11,10,11,12,11,139,9,11,3,11,141,8,11,1,11,1,11,1,
		12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,5,13,153,8,13,10,13,12,13,156,9,
		13,1,13,1,13,1,13,5,13,161,8,13,10,13,12,13,164,9,13,1,13,1,13,1,14,1,
		14,1,14,5,14,171,8,14,10,14,12,14,174,9,14,1,14,1,14,1,14,1,14,5,14,180,
		8,14,10,14,12,14,183,9,14,1,14,1,14,1,15,1,15,3,15,189,8,15,1,16,1,16,
		1,16,0,1,14,17,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,0,2,1,0,9,
		11,1,0,24,27,198,0,37,1,0,0,0,2,41,1,0,0,0,4,65,1,0,0,0,6,67,1,0,0,0,8,
		75,1,0,0,0,10,83,1,0,0,0,12,85,1,0,0,0,14,112,1,0,0,0,16,123,1,0,0,0,18,
		126,1,0,0,0,20,128,1,0,0,0,22,130,1,0,0,0,24,144,1,0,0,0,26,147,1,0,0,
		0,28,167,1,0,0,0,30,188,1,0,0,0,32,190,1,0,0,0,34,36,3,2,1,0,35,34,1,0,
		0,0,36,39,1,0,0,0,37,35,1,0,0,0,37,38,1,0,0,0,38,1,1,0,0,0,39,37,1,0,0,
		0,40,42,5,18,0,0,41,40,1,0,0,0,41,42,1,0,0,0,42,43,1,0,0,0,43,44,5,17,
		0,0,44,45,5,20,0,0,45,46,5,1,0,0,46,47,3,4,2,0,47,48,5,2,0,0,48,49,5,3,
		0,0,49,50,3,6,3,0,50,54,5,4,0,0,51,53,3,10,5,0,52,51,1,0,0,0,53,56,1,0,
		0,0,54,52,1,0,0,0,54,55,1,0,0,0,55,3,1,0,0,0,56,54,1,0,0,0,57,62,3,8,4,
		0,58,59,5,5,0,0,59,61,3,8,4,0,60,58,1,0,0,0,61,64,1,0,0,0,62,60,1,0,0,
		0,62,63,1,0,0,0,63,66,1,0,0,0,64,62,1,0,0,0,65,57,1,0,0,0,65,66,1,0,0,
		0,66,5,1,0,0,0,67,72,3,8,4,0,68,69,5,5,0,0,69,71,3,8,4,0,70,68,1,0,0,0,
		71,74,1,0,0,0,72,70,1,0,0,0,72,73,1,0,0,0,73,7,1,0,0,0,74,72,1,0,0,0,75,
		79,5,20,0,0,76,77,5,6,0,0,77,78,5,24,0,0,78,80,5,7,0,0,79,76,1,0,0,0,79,
		80,1,0,0,0,80,9,1,0,0,0,81,84,3,12,6,0,82,84,3,24,12,0,83,81,1,0,0,0,83,
		82,1,0,0,0,84,11,1,0,0,0,85,90,3,8,4,0,86,87,5,5,0,0,87,89,3,8,4,0,88,
		86,1,0,0,0,89,92,1,0,0,0,90,88,1,0,0,0,90,91,1,0,0,0,91,93,1,0,0,0,92,
		90,1,0,0,0,93,94,5,8,0,0,94,99,3,14,7,0,95,96,5,5,0,0,96,98,3,14,7,0,97,
		95,1,0,0,0,98,101,1,0,0,0,99,97,1,0,0,0,99,100,1,0,0,0,100,13,1,0,0,0,
		101,99,1,0,0,0,102,103,6,7,-1,0,103,113,3,8,4,0,104,113,3,32,16,0,105,
		106,5,1,0,0,106,107,3,14,7,0,107,108,5,2,0,0,108,113,1,0,0,0,109,113,3,
		16,8,0,110,113,3,22,11,0,111,113,3,26,13,0,112,102,1,0,0,0,112,104,1,0,
		0,0,112,105,1,0,0,0,112,109,1,0,0,0,112,110,1,0,0,0,112,111,1,0,0,0,113,
		120,1,0,0,0,114,115,10,4,0,0,115,116,3,18,9,0,116,117,3,14,7,5,117,119,
		1,0,0,0,118,114,1,0,0,0,119,122,1,0,0,0,120,118,1,0,0,0,120,121,1,0,0,
		0,121,15,1,0,0,0,122,120,1,0,0,0,123,124,3,20,10,0,124,125,3,14,7,0,125,
		17,1,0,0,0,126,127,7,0,0,0,127,19,1,0,0,0,128,129,5,12,0,0,129,21,1,0,
		0,0,130,131,5,20,0,0,131,140,5,1,0,0,132,137,3,14,7,0,133,134,5,5,0,0,
		134,136,3,14,7,0,135,133,1,0,0,0,136,139,1,0,0,0,137,135,1,0,0,0,137,138,
		1,0,0,0,138,141,1,0,0,0,139,137,1,0,0,0,140,132,1,0,0,0,140,141,1,0,0,
		0,141,142,1,0,0,0,142,143,5,2,0,0,143,23,1,0,0,0,144,145,5,13,0,0,145,
		146,3,8,4,0,146,25,1,0,0,0,147,148,5,19,0,0,148,149,5,1,0,0,149,154,3,
		14,7,0,150,151,5,5,0,0,151,153,3,14,7,0,152,150,1,0,0,0,153,156,1,0,0,
		0,154,152,1,0,0,0,154,155,1,0,0,0,155,157,1,0,0,0,156,154,1,0,0,0,157,
		158,5,2,0,0,158,162,5,14,0,0,159,161,3,28,14,0,160,159,1,0,0,0,161,164,
		1,0,0,0,162,160,1,0,0,0,162,163,1,0,0,0,163,165,1,0,0,0,164,162,1,0,0,
		0,165,166,5,15,0,0,166,27,1,0,0,0,167,172,3,32,16,0,168,169,5,5,0,0,169,
		171,3,32,16,0,170,168,1,0,0,0,171,174,1,0,0,0,172,170,1,0,0,0,172,173,
		1,0,0,0,173,175,1,0,0,0,174,172,1,0,0,0,175,176,5,4,0,0,176,181,3,30,15,
		0,177,178,5,5,0,0,178,180,3,30,15,0,179,177,1,0,0,0,180,183,1,0,0,0,181,
		179,1,0,0,0,181,182,1,0,0,0,182,184,1,0,0,0,183,181,1,0,0,0,184,185,5,
		23,0,0,185,29,1,0,0,0,186,189,3,32,16,0,187,189,5,16,0,0,188,186,1,0,0,
		0,188,187,1,0,0,0,189,31,1,0,0,0,190,191,7,1,0,0,191,33,1,0,0,0,19,37,
		41,54,62,65,72,79,83,90,99,112,120,137,140,154,162,172,181,188
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
