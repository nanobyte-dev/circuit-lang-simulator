//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CircuitLang.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="CircuitLangParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public interface ICircuitLangVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="CircuitLangParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProgram([NotNull] CircuitLangParser.ProgramContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CircuitLangParser.module"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitModule([NotNull] CircuitLangParser.ModuleContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CircuitLangParser.module_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitModule_argument_list([NotNull] CircuitLangParser.Module_argument_listContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CircuitLangParser.module_output_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitModule_output_list([NotNull] CircuitLangParser.Module_output_listContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CircuitLangParser.identifier_with_array"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIdentifier_with_array([NotNull] CircuitLangParser.Identifier_with_arrayContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CircuitLangParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatement([NotNull] CircuitLangParser.StatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CircuitLangParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignment([NotNull] CircuitLangParser.AssignmentContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CircuitLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpression([NotNull] CircuitLangParser.ExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CircuitLangParser.unary_operation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnary_operation([NotNull] CircuitLangParser.Unary_operationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CircuitLangParser.binary_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBinary_operator([NotNull] CircuitLangParser.Binary_operatorContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CircuitLangParser.unary_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnary_operator([NotNull] CircuitLangParser.Unary_operatorContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CircuitLangParser.module_call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitModule_call([NotNull] CircuitLangParser.Module_callContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CircuitLangParser.variable_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariable_declaration([NotNull] CircuitLangParser.Variable_declarationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CircuitLangParser.truth_table"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTruth_table([NotNull] CircuitLangParser.Truth_tableContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CircuitLangParser.truth_table_entry"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTruth_table_entry([NotNull] CircuitLangParser.Truth_table_entryContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CircuitLangParser.literal_or_wild"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLiteral_or_wild([NotNull] CircuitLangParser.Literal_or_wildContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CircuitLangParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLiteral([NotNull] CircuitLangParser.LiteralContext context);
}
